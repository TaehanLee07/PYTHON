# 조건문 if
# if는 조건식을 지정하고(조건 예 : a 가 1일때) :(콜론)을 붙이며 다음 줄에 실행할 코드가 옵니다. 이때 실행할 코드는 반드시 들여쓰기를 해야 합니다.
# 예시 코드
# if a == 3: a가 3일때
#    print("3입니다") 해당 명령실행

a = 10
if a > 5:
    print("5보다 크다") # 참 이기에 해당 명령문 실행 
a = 1
if a > 5:
    print("5보다 크다") # 거짓 이기에 해당 명령문 실행하지 않음

# 조건을 여러개 써보자 'and', 'or'
# and는 앞뒤의 두가지 조건이 모두 참일때 or는 앞뒤 조건중 하나라도 참 이면 실행시키는 연산자들이다 이걸 이용해서 조건문에 다양한 조건을 지정해줄수있다
# if a > 1 and a < 3: a가 1보다 크면서 3보다 작을때
#     print(2) 2를 출력

a = 10
b = 20
c = 15
if c > a and c < b: # c가 a 보다 크고 c가 b 보다 작기에 명령 실행
    print('통과')

a = 10
b = 20
c = 15
if c < a or c < b: # c가 a 보다 작지는 않지만 c가 b 보다 작기에 명령 실행
    print('통과')
# else , elif를 사용해서 예외 처리 해보자
# else : else는 단독으로 사용할수 없고 if와 함께 사용하면 조건식이 만족할 때와 만족하지 않을 때 각각 다른 코드를 실행할 수 있습니다.
# else를 쓰면 A일때 실행 A가 아니면 else 문의 명령을 실행하게된다.
a = 5
if a == 10:
    print('a는 10입니다')
else:
    print('a는 10이 아닙니다') # a는 10이 아닌 5이기에 'a는 10이 아닙니다' 출력하게됨
# elif 사용하기
# elif는 else와 다르게 조건을 지정해줄수있고 여러번 사용할수있다
# elif를 쓰면 if a == 10 조건 이후 elif a == 20 이런식으로 사용할 수 있다.
a = 20
if a == 10:
    print('a는 10입니다')
elif a == 20:
    print('a는 20입니다')
elif a == 30:
    print('a는 30입니다') # a는 20이기에 'a는 20입니다' 출력

# if, else, elif 모두 사용해보기
# 만약 성적이 100점 이면 'A' 80점 이면 'B' 60점 이면 'C' 모두 만족하지 못할때는 '미달' 을 출력하는 프로그램을 작성하면
score = 100
if score == 100:
    print('A')
elif score == 80:
    print('B')
elif score == 60:
    print('C')
else:
    print('미달')
# 이렇게 작성할 수 있다 위에서 부터 조건물을 통해 검사를 하고 최종적으로 결과를 출력한다 점수가 100점이니 'A'를 출력한다.

# 반복문 for
# Hello를 만약 100번을 출력하려면 print('Hello')를 100번 적어야 할까? 그럴 필요 없이 반복문을 사용해서 간단하게 만들수 있다.
# 먼저 range를 사용한 반복문을 알아보자 기분 형태는
# for 변수 in range(횟수):
#     반복할 코드
# 이렇게 되어있다 그리고 무조건 들여쓰기를 해줘야 한다
for i in range(10):
    print('Hi')# 'Hi'를 10번 출력함
# 또한 range() 에 숫자하나만 넣는것이 아닌 여러 숫자를 한번에 넣을 수 있는데
# range(0, 10) 0에서 10이 되기 전 까지 (9까지) 반복
# range(0, 10, 2) 0에서 10이 되기 전 까지 2씩 증가 하며 10이 되기 전까지 반복
# 이걸 사용해보면 이렇게 된다.
for i in range(0, 10):
    print(i) # 0~9 까지 출력
for i in range(0, 10, 2):
    print(i) # 0, 2, 4, 6, 8 출력
# 그리고 변수 i는 반복문 내에서만 존재하는 지역변수임으로 다른 반복문이나 반복문을 벗어나면 i라는 변수를 사용 할 수 없다.

# 반복문 While 사용
# while은 ~하는 동안이라는 뜻을 가졌고 반복 횟수가 명확하지 않을때 사용된다.
# while 의 기본 구성은 다음과 같다.
i = 0
while i < 100:            # while 조건식
     print('Hello, World!')    # 반복할 코드
     i += 1                    # 변화식
# 'Hello, World' 100번 출력

# 무한 반복 만들기
# while의 조건문에 True를 지정하면 무한으로 반복을 한다.
# 'Python' 이라는 문자를 무한대로 출력하는 코드
while True:
    print('Hello, world!')

# continue 와 break 로 반복문 제어하기
# break는 for와 while 에서 벗어나기 위해 사용합니다. 즉, 루프를 완전히 중단한다. 
# continue는 (반복)을 유지한 상태에서 코드의 실행만 건너뛰는 역할을 합니다. 마치 카드 게임을 할 때 패가 안 좋으면 판을 포기하고 다음 기회를 노리는 것과 비슷합니다.
# 먼저 break로 반복문을 끝내는 방법입니다.
i = 0
while True:    
    print(i)
    i += 1          # i를 1씩 증가시킴
    if i == 150:    # i가 150일 때
        break       # 반복문을 끝냄.
# 다음은 for 에서 break로 반복문 끝내기를 해보자
for i in range(9999):    # 9999번 반복
    print(i)
    if i == 99:    # i가 99일 때
        break       # 반복문을 끝냄

# for에서 continue 사용하기 
for i in range(100):       # 100번 반복
    if i % 2 == 0:         # i를 2로 나누었을 때 나머지가 0면 짝수
        continue           # 아래 코드를 실행하지 않고 건너뜀
    print(i)
# 1, 3, 5 ... 99 출력

# while에서 contunue 사용하기
i = 0
while i < 100:        # i가 100보다 작을 때 반복
    i += 1            # i값 1씩 증가
    if i % 2 == 0:    # i가 짝수인지 판별
        continue      # 아래 코드를 실행하지 않고 건너뜀
    print(i)
# 1, 3, 5 ... 99 출력

# 중첩 루프 사용하기 (2중 for 문)
# 중첩루프 예시
for i in range(횟수):		# 바깥쪽 루프
	for j in range(횟수):	# 안쪽 루프
# 중첩루프로 구구단 만들기
for i in range(2,10): # 단
    for j in range(1,10): # 곱해지는 값
        print(i + '*' + j + ' = ' + (i * j))
        # i 값이 5 이고 j 값이 7 이면
        # 5*7 = 35 출력

# 가로 별 11개, 세로 별 4개인 사각형 만들기
for i in range(4):
    for j in range(11):
        print('*', end='')
    print() # 안쪽 for문이 다돌면 줄바꿈

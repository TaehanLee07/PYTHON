# 리스트에는 여러가지 기능이 있다
# 리스트에 요소를 추가하는 메서드 3가지
# append: 요소 하나를 추가
# extend: 리스트를 연결하여 확장
# insert: 특정 인덱스에 요소 추가

# append
# append는 리스트의 끝에 요소를 하나 추가해준다. [1, 2, 3] 으로 이루어진 리스트에 5를 추가하여 [1, 2, 3, 5] 가 되게 한다.
a = [1, 2, 3]
print(a) # [1, 2, 3] 출력
len(a) # 3
a.append(4)
print(a) # [1, 2, 3, 4] 출력
len(a) # 4

# 리스트 안에 리스트를 넣기 (중첩 리스트 만들기)
a = [5, 10, 15]
len(a) # 3
a.append([20, 25, 30])
print(a) # [5, 10, 15, [20, 25, 30]] 출력
len(a) # 4 a.append([20, 25, 30])는 [20, 25, 30] 라는 요소를 하나 넣은것이기에 리스트의 길이는 1만 증가한다

# 리스트 확장하기
# 리스트에 요소를 여러 개 추가하려면 append를 여러 번 사용하는 방법도 있지만, 추가할 요소가 많은 경우에는 상당히 번거롭습니다. 이때는 extend를 사용합니다.
# 또한 extends 를 사용하면 위에서 처럼 길이를 출력할때도 넣은값들 만큼 잘 출력됩니다.
a = [1, 10, 20]
len(a) # 3
print(a) # [1, 10, 20]
a.extend([5, 165])
print(a) # [1, 10, 20, 5, 165]
len(a) # 5

# 리스트의 특정 인덱스에 요소 추가하기
# append, extend는 리스트 끝에 요소를 추가합니다. 그러면 원하는 위치에 요소를 추가하는 방법은 없을까요? 이때는 insert를 사용합니다.
# insert(인덱스, 요소)는 리스트의 특정 인덱스에 요소 하나를 추가합니다.
a = [1, 10, 20]
a.insert(2, 100)
print(a) # [1, 10, 100, 20]

# 리스트의 맨 앞에 넣기
a = [1, 10, 20]
a.insert(0, 100)
print(a) # [100, 1, 10, 20]

# 리스트의 끝에 넣기
a = [1, 10, 20]
a.insert(len(a), 100)
print(a) # [1, 10, 20, 100]

# 리스트에서 요소 삭제하기
# 요소를 삭제하는 메서드는 2가지가 있습니다
# pop: 마지막 요소 또는 특정 인덱스의 요소를 삭제
# remove: 특정 값을 찾아서 삭제
a = [1, 10, 20]
a.pop()
print(a) # [1, 10]

# pop 에 인덱스 값 넣어주기
a = [1, 10, 20]
a.pop(1)
print(a) # [1, 20]

# 리스트에서 특정 값을 찾아서 삭제하기
# remove(값)을 해주면 값에 해당하는 걸 리스트에서 삭제합니다.
a = [1, 10, 20]
a.remove(1)
print(a) # [10, 20]

# 만약 같은값이 있다면 처음찾은 값만 삭제한다.
a = [1, 10, 20, 1]
a.remove(1)
print(a) # [10, 20, 1]

# 리스트에서 특정 값의 인덱스 구하기
# index(값) 을 통해서 해당 값의 인덱스 번호를 찾을수 있다
a = [1, 10, 20]
a.index(10) # 1

# 특정 값의 개수 구하기
# count(값) 으로 값과 같은 요소들이 몇개나 있는지 알수있다.
a = [1, 10, 20, 10, 10]
a.count(10) # 3

# 리스트의 순서를 뒤집기
# reverse()는 리스트에서 요소의 순서를 반대로 뒤집는다.
a = [1, 2, 3, 4, 5]
a.reverse()
print(a) # [5, 4, 3, 2, 1]

# 리스트의 요소를 정렬하기
# sort()는 리스트의 요소을 작은 순서대로(오름차순) 정렬합니다
a = [4, 12, 1, 2, 77, 8]
a.sort()
print(a) # [1, 2, 4, 8, 12, 77]

# 리스트의 모든 요소 삭제하기
# clear()는 리스트의 모든 요소를 삭제합니다. (빈 리스트로 만든다)
a = [1, 2, 3, 4, 5, 10]
a.clear()
print(a) # []

# 리스트가 비어있는지 확인하기
a = []
if not len(a):    # 리스트가 비어 있으면 True
    print(True)
if len(a):        # 리스트에 요소가 있으면 True
    print(False)

# 리스트의 할당과 복사 알아보기
# 할당과 복사는 비슷한 것 같지만 큰 차이점이 있습니다. 먼저 다음과 같이 리스트를 만든 뒤 다른 변수에 할당합니다.
a = [0, 1, 2, 3, 5]
b = a
# b = a와 같이 리스트를 다른 변수에 할당하면 리스트는 두 개가 될 것 같지만 실제로는 리스트가 한 개입니다.

# is 연산자로 a와b를 비교해보면 True가 나옵니다.
a is b # True
# a와 b는 같기 때문에  b에서 리스트 값을 바꾸어도 리스트 a와 b에 모두 반영됩니다.
a = [1, 2, 3, 4, 5]
b = a
b[2] = 7
print(a) # [1, 2, 7, 4, 5]

# 리스트 복사
# 리스트 a와 b를 완전히 두 개로 만들려면 copy 메서드로 모든 요소를 복사해야 합니다.
a = [1, 2, 3, 4, 5]
b = a.copy()
print(a is b) # False
# 이제 a 와 b는 별개이기에 b 리스트에서 값을 바꿔도 a에는 적용되지 않습니다.

# for 반복문으로 요소 출력하기
# 리스트에 인덱스를 지정하여 요소를 한 개씩 출력하기는 상당히 귀찮기에 반복문으로 출력한다.
a = [1, 2, 3, 4, 5]
for i in a:
    print(i) # 배열의 모든요소 출력
  
# 인덱스와 요소를 함께 출력하기
# enumerate를 사용해서 인덱스 주소와 값을 같이 출력해봅시다.
for index, value in enumerate(a):
  print(index, value)
# 출력
# 0 1
# 1 2
# 2 3
# 3 4
# 4 5
# 위 코드 처럼 enumerate에 리스트를 넣으면 for 반복문에서 인덱스와 요소를 동시에 꺼내 올 수 있습니다 만약 인덱스를 0부터가 아닌 1부터 출력하고 싶다면? index+1 을 하면 간단히 해결됩니다.
# 조금더 파이썬의 특징을 살려본다면 enumerate(a, start=1) 이런식으로 해결할수도 있습니다.

# while반복문으로 요소 출력하기
# while 로 출력할때는 리스트의 길이만큼 출력해야하니 len을 필수적으로 사용합니다
a = [1, 2, 3, 4, 5]
i = 0
while i < len(a):
    print(a[i])
    i += 1

# 리스트의 가장 작은 수, 가장 큰 수, 합계 구하기
# 먼저 가장 작은 수와 가장 큰 수를 구해봅시다 앞에서 배운 반복문으로 요소를 모두 검사하면서 찾아봅시다.
a = [10, 100, 5, 60, 150]
smallest_number = a[0] # 가장 작은수를 저장한 변수 시작값은 a 리스트의 0본지로 지정
for i in a:
    if i < smallest_number:
        smallest_number = i
print(smallest_number) # 5 출력
# 가장 큰수는 부등호만 반대로 만들면 됩니다.
# 하지만 가장 간단한 방법은 파이썬에서 제공하는 min, max 함수를 사용하면 됩니다.
a = [10, 100, 5, 60, 150]
print(max(a)) # 150 출력

a = [10, 100, 5, 60, 150]
print(min(a)) # 5 출력

# 리스트 요소들의 합계 구하기
# 반복문을 써서 간단하게 만들수 있다
a = [10, 20, 30, 40, 50]
sum = 0 # 합을 담을 변수
for i in a:
    sum += i
print(sum) # 150 출력
# 하지만 이렇게 만들필요 없이 파이썬에서 제공하는 sum 함수를 사용하면 코드를 줄일 수 있다.
a = [10, 20, 30, 40, 50]
print(sum(a)) # 150 출력

# 리스트에 map 사용하기
# 실수로 저장된 a 리스트의 모든 요소를 정수로 바꿔 출력하려면 map을 이용한 형변환을 해서 간단히 바꿔줄 수 있다.
a = [1.5, 2.8, 3.1, 4.3, 5.0]
a = list(map(int, a)) # 형변환
print(a) # [1, 2, 3, 4, 5]

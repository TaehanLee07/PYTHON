# 함수
# 같은코드가 반복적으로 나올때 여러번 적으면 실수할수도 있고 귀찮기 떄문에 함수라는것을 사용한다
# 함수의 장점 : 코드의 용도를 구분할 수 있다. 코드를 재사용할 수 있다. 실수를 줄일 수 있다.
# 파이썬에서 함수를 만드는 방법은 다음과 같다
# 예시
def 함수이름():
  print()
# 함수를 사용하는법
함수이름() # 함수 호출
# 1-1 간단한 함수 만들어보기
# Hello World를 출력하는 함수를 만들어보자
def hello():
    print('Hello, world!')
hello() # 'Hello, world!' 출력

# 1-2 더하기 함수 만들어보기
# 지금까지 만들어본 hello 함수는 동작이 고정되어 있습니다. 즉, 같은 문자열만 출력하죠. 이러면 함수를 사용하는 의미가 없다. 이번에는 함수에 값을 넣어서 동작을 바꾸어보자.
# 함수에서 값을 받으려면 ( )(괄호) 안에 변수 이름을 지정해주면 됩니다. 특히 이 변수를 매개변수(parameter)라고 부릅니다.
# 예시
def 함수이름(매개변수1, 매개변수2):
    print()
# a 와 b 를 더한값을 출력하는 함수 만들기
def plus(a, b):
    print(a + b)
plus(3,5) # 8 출력

# 1-3 함수의 결과를 반환하기
# 앞에서 만든 plus 함수는 두 수를 더해서 바로 출력했습니다. 이렇게 하지말고 함수에서 값을 꺼내오고 싶다! 이럴때는 return을 사용해서 결과를 반환받을 수 있다
def plus(a, b):
    return a + b
a = plus(1,4)
print(a)

# 1-4 함수에서 여러갑을 리턴하기
# 예시
def 함수이름(매개변수):
    return 반환값1, 반환값2
# 덧셈의 합과 뺄셈 출력
def plusAndminus(a, b):
    return a + b, a - b
a = plusAndminus(10,5)
print(a) # (15, 5)
# 이렇게 return으로 값을 여러 개 반환하면 실제로는 튜플이 반환됩니다.

# 함수에서 위치 인수와 키워드 인수 사용하기
# 지금까지 간단하게 'Hello, world!'를 출력하는 함수와 두 수를 더하는 함수를 만들어보았습니다. 파이썬에서는 함수를 좀 더 편리하게 사용할 수 있도록 다양한 기능을 제공합니다. 
# 이번에는 함수에서 위치 인수, 키워드 인수를 사용하는 방법과 리스트, 딕셔너리 언패킹(unpacking)을 활용하는 방법을 알아보겠습니다.

# 2-1 위치 인수와 리스트 언패킹 사용하기
# 함수에 인수를 순서대로 넣는 방식을 위치 인수라고 하며 인수의 위치가 정해져 있습니다.
print(10, 20, 30)
# 위치 인수를 사용하는 함수를 만들고 호출하기
def setnums(a, b, c):
    print(a)
    print(b)
    print(c)
setnums(1, 5, 10) # 1, 5, 10 출력

# 2-2 언패킹 사용하기
# 이렇게 인수를 순서대로 넣을 때는 리스트나 튜플을 사용할 수도 있습니다. 다음과 같이 리스트 또는 튜플 앞에 *(애스터리스크)를 붙여서 함수에 넣어주면 됩니다.
def setnums(a, b, c):
    print(a)
    print(b)
    print(c)
a = [1, 5, 10]
setnums(*a) # 1, 5, 10 출력

# 2-3 가변 인수 함수 만들기
# 그럼 위치 인수와 리스트 언패킹은 어디에 사용하느냐 이 기능들은 인수의 개수가 정해지지 않은 가변 인수에 사용한다. 
# 즉, 같은 함수에 인수 한 개를 넣을 수도 있고, 열 개를 넣을 수도 있다. 또는, 인수를 넣지 않을 수도 있다.
# 가변 인수 함수는 매개변수 앞에 *를 붙여서 만듭니다.
# 함수에 숫자를 넣어서 호출해봅니다. 숫자를 한 개 넣으면 한 개 출력되고, 네 개 넣으면 네 개가 출력됩니다. 즉, 넣은 숫자 개수만큼 출력된다.
def variArgu(*args):
    for i in args:
        print(args)
variArgu(10, 20, 30) # (10, 20, 30) 3번 출력

# 2-4 키워드 인수 사용하기
# 지금까지 함수에 인수를 넣을 때 값이나 변수를 그대로 넣었는데. 그러다 보니 각각의 인수가 무슨 용도인지 알기가 어려워진다. 보통은 함수의 사용 방법을 익힐 때 인수의 순서와 용도를 함께 외웁니다.
# 예를 들어 개인정보를 출력하는 함수를 만든다고 가정하고 만들면
def personal_info(name, age, address):
    print('이름: ', name)
    print('나이: ', age)
    print('주소: ', address)
personal_info('이태한',18,'광주시') # 이름:  이태한 나이:  18 주소:  광주
# 하지만 이러한 방식은 인수의 순서와 용도를 모두 기억해야 해서 불편합니다. 그래서 파이썬에서는 인수의 순서와 용도를 매번 기억하지 않도록 키워드 인수(keyword argument)라는 기능을 제공힌다.
# 키워드 인수는 말 그대로 인수에 이름(키워드)을 붙이는 기능인데 키워드=값 형식으로 사용한다.
def personal_info(name, age, address):
    print('이름: ', name)
    print('나이: ', age)
    print('주소: ', address)
personal_info(name='이태한',age=18,address='광주시') # 이름:  이태한 나이:  18 주소:  광주
# 그리고 키워드 인수를 사용하면 인수의 순서를 맞추지 않아도 키워드에 해당하는 값이 들어간다.
def personal_info(name, age, address):
    print('이름: ', name)
    print('나이: ', age)
    print('주소: ', address)
personal_info(age='18',name='이태한',address='광주시') # 이름:  이태한 나이:  18 주소:  광주 (똑같다)

# 키워드 인수와 딕셔너리 언패킹 사용하기
# 지금까지 함수를 호출할 때 키워드 인수로 직접 값을 넣었봤는데. 이번에는 딕셔너리를 사용해서 키워드 인수로 값을 넣는 딕셔너리 언패킹을 사용해보자. 
# 다음과 같이 딕셔너리 앞에 **(애스터리스크 두 개)를 붙여서 함수에 넣어줍니다.
# 함수(**딕셔너리)
def personal_info(name, age, address):
    print('이름: ', name)
    print('나이: ', age)
    print('주소: ', address)
person1 = x = {'name': '홍길동', 'age': 20, 'address': '서울시 xx동'}
personal_info(**x) # 이름:  홍길동 나이:  20 주소:  서울시 xx동
# '**'를 두번 사용하는 이유 : 딕셔너리는 키-값 쌍 형태로 값이 저장되어 있기 때문입니다. 

# 2-5 매개변수에 초깃값 지정하기
# 지금까지 함수를 호출할 때 항상 인수를 넣어서 값을 전달했습니다. 그러면 인수를 생략할 수는 없을까요? 이때는 함수의 매개변수에 초깃값을 지정하면 됩니다. 초깃값은 다음과 같이 함수를 만들 때 매개변수=값 형식으로 지정한다.
# 예시
def 함수이름(매개변수=값):
    코드

def personal_info(name, age, address = '비공개'):
    print('이름: ', name)
    print('나이: ', age)
    print('주소: ', address)
person1 = x = {'name': '홍길동', 'age': 20}
personal_info(**x) # 이름:  홍길동 나이:  20 주소:  비공개

# 2-6 재귀호출 사용하기
# 보통은 잘 사용하지 않지만 알고리즘을 구현할때 쓰이는 재귀호출이란 함수 자기자신을 호출하는 방식이다
# 예시
def hello():
    print('Hello, world!')
    hello()
hello() # 'Hello, world!' 무한으로 출력
# 재귀호출을 사용하는 가장 유명한 알고리즘 문제인 팩토리얼을 만들어보자
# 일단 팩토리얼이란 팩토리얼은 1부터 n까지 양의 정수를 차례대로 곱한 값을 나타낸다
def factorial(n):
    if n == 1:      # n이 1일 때
        return 1    # 1을 반환하고 재귀호출을 끝냄
    return n * factorial(n - 1)    # n과 factorial 함수에 n - 1을 넣어서 반환된 값을 곱함
print(factorial(5)) # 120 출력
